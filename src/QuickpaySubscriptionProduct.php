<?php

namespace QuickpaySubscripton;

use Context;
use Db;
use DbQuery;
use PrestaShopDatabaseException;
use PrestaShopException;
use QuickpaySubscription;

class QuickpaySubscriptionProduct extends \ObjectModel
{
    public $id;
    public $id_shop;
    public $id_plan;
    public $id_product;
    public $cycle;
    public $status;
    public $date_add;
    public $date_upd;

    public static $definition = [
        'table' => QuickpaySubscription::TABLE_BASE . '_product',
        'primary' => 'id',
        'fields' => [
            'id_shop' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => true],
            'id_product' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => true],
            'id_plan' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => true],
            'cycle' => ['type' => self::TYPE_STRING],
            'status' => ['type' => self::TYPE_INT, 'required' => true],
            'date_add' => ['type' => self::TYPE_DATE, 'required' => true],
            'date_upd' => ['type' => self::TYPE_DATE, 'required' => true],
        ],
    ];

    public function __construct($id = null, $id_lang = null, $id_shop = null)
    {
        parent::__construct($id, $id_lang, $id_shop);

        if ($this->cycle) {
            $this->cycle = json_decode($this->cycle);
        }

    }

    public function add($auto_date = true, $null_values = false)
    {
        if (!$this->id_shop) {
            $this->id_shop = Context::getContext()->shop->id;
        }

        if (is_array($this->cycle)) {
            $this->cycle = json_encode($this->cycle);
        }


        return parent::add($auto_date, $null_values);
    }

    public function update($null_values = false)
    {
        if (!$this->id_shop) {
            $this->id_shop = Context::getContext()->shop->id;
        }

        if (is_array($this->cycle)) {
            $this->cycle = json_encode($this->cycle);
        }

        return parent::update($null_values); // TODO: Change the autogenerated stub
    }

    /**
     * Get all subscription products
     *
     * @throws PrestaShopDatabaseException
     */
    public static function getAll($idShop = 0)
    {
        if (!$idShop) {
            $idShop = Context::getContext()->shop->id;
        }

        $planCount = QuickpaySubscriptionPlan::getCount($idShop);

        $sql = new DbQuery();
        $sql->select('id_product');
        $sql->from(self::$definition['table']);
        $sql->groupBy('id_product');
        $sql->having('COUNT(*) >= ' . $planCount);

        return Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($sql);
    }

    /**
     * Get subscription product ID by Prestashop product ID
     *
     * @param $idProduct
     * @return false|string
     */
    public static function getIdByProductId($idProduct)
    {
        $sql = new DbQuery();
        $sql->select(self::$definition['primary']);
        $sql->from(self::$definition['table']);
        $sql->where('id_product = ' . $idProduct);
        $sql->where('id_shop = ' . Context::getContext()->shop->id);
        $sql->where('status = 1');

        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue($sql);
    }

    /**
     * Get subscription product by Prestashop product ID, plan and frequency
     *
     * @param $idProduct
     * @param $idPlan
     * @param $cycle
     * @param $idShop
     * @return false|string
     */
    public static function getProductByIdAndPlan($idProduct, $idPlan, $cycle, $idShop = 0)
    {
        if (!$idShop) {
            $idShop = Context::getContext()->shop->id;
        }

        $sql = new DbQuery();
        $sql->select('id');
        $sql->from(self::$definition['table']);
        $sql->where('`id_product` =' . $idProduct);
        $sql->where('`id_plan` = ' . $idPlan);
        $sql->where('`cycle` LIKE \'%' . $cycle . '%\'');
        $sql->where('`id_shop` =' . $idShop);

        return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue($sql);
    }

    /**
     * Get all plans added to the product in the selected shop
     *
     * @param int $idProduct
     * @param int $idShop
     *
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public static function getByProductId($idProduct, $idShop = 0, $status = 1)
    {
        if (!$idShop) {
            $idShop = Context::getContext()->shop->id;
        }

        $sql = new DbQuery();
        $sql->select('*');
        $sql->from(self::$definition['table']);
        $sql->where('`id_product` = ' . $idProduct);
        $sql->where('`id_shop` = ' . $idShop);
        $sql->where('`status` = ' . $status);

        $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($sql);

        if (!$result || !count($result)) {
            return [];
        }

        $objects = [];

        foreach ($result as $res) {
            $obj = new QuickpaySubscriptionProduct($res[self::$definition['primary']]);
            $obj->plan = new QuickpaySubscriptionPlan($res['id_plan'], Context::getContext()->language->id, Context::getContext()->shop->id);
            switch ($obj->plan->frequency) {
                case 'daily':
                    $objects[0] = $obj;
                    break;
                case 'weekly':
                    $objects[1] = $obj;
                    break;
                case 'monthly':
                    $objects[2] = $obj;
                    break;
                case 'yearly':
                    $objects[3] = $obj;
                    break;
            }
        }
        ksort($objects);

        return $objects;
    }

    /**
     * Get subscription products by Prestashop product ID and plan
     *
     * @param $idProduct
     * @param $idPlan
     * @param $idShop
     * @param $status
     * @return array|bool|object
     */
    public static function getByProductIdAndFrequency($idProduct, $idPlan, $idShop = 0, $status = 1)
    {
        if (!$idShop) {
            $idShop = Context::getContext()->shop->id;
        }


        $sql = new DbQuery();
        $sql->select('`id`,`cycle`');
        $sql->from(self::$definition['table']);
        $sql->where('`id_product` = ' . $idProduct);
        $sql->where('`id_shop` = ' . $idShop);
        $sql->where('`status` = ' . $status);
        $sql->where('`id_plan` = ' . $idPlan);

        $result = Db::getInstance()->getRow($sql);
        if (!$result) {
            return [];
        }

        if (trim($result['cycle'])) {
            $result['cycle'] = json_decode($result['cycle']);
        } else {
            $result['cycle'] = [];
        }

        return $result;
    }

    /**
     * Get available plans and frequencies for subscription products
     *
     * @param $idProduct
     * @param $idPlan
     * @param $idShop
     * @param $status
     * @return array|mixed
     */
    public static function getCycleByProductIdAndFrequency($idProduct, $idPlan, $idShop = 0, $status = 1)
    {
        if (!$idShop) {
            $idShop = Context::getContext()->shop->id;
        }

        $sql = new DbQuery();
        $sql->select('`cycle`');
        $sql->from(self::$definition['table']);
        $sql->where('`id_product` = ' . $idProduct);
        $sql->where('`id_shop` = ' . $idShop);
        $sql->where('`status` = ' . $status);
        $sql->where('`id_plan` = ' . $idPlan);

        $result = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue($sql);
        if (!$result) {
            return [];
        }

        return json_decode($result);
    }

    /**
     * Check if the subscription product exists by Prestashop product ID
     *
     * @throws PrestaShopException
     * @throws PrestaShopDatabaseException
     */
    public static function checkIfExists($idProduct, $idShop = 0): bool
    {
        return (bool)count(self::getByProductId($idProduct, $idShop = 0));
    }

    /**
     * Saves the subscription data for a product in the backoffice
     *
     * @param int $idProduct Product ID
     * @param int $idPlan Plan ID
     * @param array $cycle Frequency cycle
     * @param int $id Subscription product ID if exists
     * @param int $idShop Shop ID if it's passed
     *
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public static function adminSave($idProduct, $idPlan, $cycle, $id = 0, $idShop = 0)
    {
        if (!$idShop) {
            $idShop = Context::getContext()->shop->id;
        }

        if ($id) {
            $subscriptionProduct = new self($id);
        } else {
            $subscriptionProduct = new self();
            $subscriptionProduct->id_shop = $idShop;
            $subscriptionProduct->id_product = (int) $idProduct;
            $subscriptionProduct->id_plan = $idPlan;
        }

        $subscriptionProduct->cycle = $cycle;
        $subscriptionProduct->status = count($cycle) ? 1 : 0;

        return $subscriptionProduct->save();
    }
    /**
     * Ajax functionality for backoffice list to enable/disable subscription products
     *
     * @return bool|int|string
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     */
    public function toggleStatus()
    {
        // Object must have a variable called 'status'
        if (!property_exists($this, 'status')) {
            throw new PrestaShopException('property "status" is missing in object ' . get_class($this));
        }

        // Update only active field
        $this->setFieldsToUpdate(['status' => true]);

        // Update active status on object
        $this->status = !(int) $this->status;

        // Change status to active/inactive
        return $this->update(false);
    }
}
